/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface ISignatureVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getDomainSeparator"
      | "isUniqueIdUsed"
      | "markUniqueIdAsUsed"
      | "verifySignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUniqueIdUsed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markUniqueIdAsUsed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySignature",
    values: [
      AddressLike,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUniqueIdUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markUniqueIdAsUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySignature",
    data: BytesLike
  ): Result;
}

export interface ISignatureVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): ISignatureVerifier;
  waitForDeployment(): Promise<this>;

  interface: ISignatureVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getDomainSeparator: TypedContractMethod<[], [string], "view">;

  isUniqueIdUsed: TypedContractMethod<[uniqueId: BytesLike], [boolean], "view">;

  markUniqueIdAsUsed: TypedContractMethod<
    [uniqueId: BytesLike],
    [void],
    "nonpayable"
  >;

  verifySignature: TypedContractMethod<
    [
      minter: AddressLike,
      tokenId: BigNumberish,
      uri: string,
      price: BigNumberish,
      phaseIndex: BigNumberish,
      uniqueId: BytesLike,
      timestamp: BigNumberish,
      signature: BytesLike
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getDomainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isUniqueIdUsed"
  ): TypedContractMethod<[uniqueId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "markUniqueIdAsUsed"
  ): TypedContractMethod<[uniqueId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifySignature"
  ): TypedContractMethod<
    [
      minter: AddressLike,
      tokenId: BigNumberish,
      uri: string,
      price: BigNumberish,
      phaseIndex: BigNumberish,
      uniqueId: BytesLike,
      timestamp: BigNumberish,
      signature: BytesLike
    ],
    [boolean],
    "view"
  >;

  filters: {};
}
