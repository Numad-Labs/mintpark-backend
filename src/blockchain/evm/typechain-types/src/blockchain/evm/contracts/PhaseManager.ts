/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IPhaseManager {
  export type PhaseStruct = {
    phaseType: BigNumberish;
    price: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    maxSupply: BigNumberish;
    maxPerWallet: BigNumberish;
    mintedInPhase: BigNumberish;
    merkleRoot: BytesLike;
  };

  export type PhaseStructOutput = [
    phaseType: bigint,
    price: bigint,
    startTime: bigint,
    endTime: bigint,
    maxSupply: bigint,
    maxPerWallet: bigint,
    mintedInPhase: bigint,
    merkleRoot: string
  ] & {
    phaseType: bigint;
    price: bigint;
    startTime: bigint;
    endTime: bigint;
    maxSupply: bigint;
    maxPerWallet: bigint;
    mintedInPhase: bigint;
    merkleRoot: string;
  };
}

export interface PhaseManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addPhase"
      | "getActivePhase"
      | "getMintedInPhase"
      | "getPhaseCount"
      | "isActivePhasePresent"
      | "owner"
      | "phases"
      | "recordMint"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PhaseAdded"
      | "PhaseUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addPhase",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintedInPhase",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPhaseCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isActivePhasePresent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "phases",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordMint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addPhase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActivePhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintedInPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPhaseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActivePhasePresent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "phases", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recordMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PhaseAddedEvent {
  export type InputTuple = [
    phaseIndex: BigNumberish,
    phaseType: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    phaseIndex: bigint,
    phaseType: bigint,
    price: bigint
  ];
  export interface OutputObject {
    phaseIndex: bigint;
    phaseType: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PhaseUpdatedEvent {
  export type InputTuple = [
    phaseIndex: BigNumberish,
    phaseType: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    phaseIndex: bigint,
    phaseType: bigint,
    price: bigint
  ];
  export interface OutputObject {
    phaseIndex: bigint;
    phaseType: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PhaseManager extends BaseContract {
  connect(runner?: ContractRunner | null): PhaseManager;
  waitForDeployment(): Promise<this>;

  interface: PhaseManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addPhase: TypedContractMethod<
    [
      _phaseType: BigNumberish,
      _price: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _maxSupply: BigNumberish,
      _maxPerWallet: BigNumberish,
      _merkleRoot: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getActivePhase: TypedContractMethod<
    [],
    [
      [bigint, IPhaseManager.PhaseStructOutput] & {
        phaseIndex: bigint;
        phase: IPhaseManager.PhaseStructOutput;
      }
    ],
    "view"
  >;

  getMintedInPhase: TypedContractMethod<
    [user: AddressLike, phaseType: BigNumberish],
    [bigint],
    "view"
  >;

  getPhaseCount: TypedContractMethod<[], [bigint], "view">;

  isActivePhasePresent: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  phases: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, string] & {
        phaseType: bigint;
        price: bigint;
        startTime: bigint;
        endTime: bigint;
        maxSupply: bigint;
        maxPerWallet: bigint;
        mintedInPhase: bigint;
        merkleRoot: string;
      }
    ],
    "view"
  >;

  recordMint: TypedContractMethod<[user: AddressLike], [bigint], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addPhase"
  ): TypedContractMethod<
    [
      _phaseType: BigNumberish,
      _price: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _maxSupply: BigNumberish,
      _maxPerWallet: BigNumberish,
      _merkleRoot: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActivePhase"
  ): TypedContractMethod<
    [],
    [
      [bigint, IPhaseManager.PhaseStructOutput] & {
        phaseIndex: bigint;
        phase: IPhaseManager.PhaseStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMintedInPhase"
  ): TypedContractMethod<
    [user: AddressLike, phaseType: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPhaseCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isActivePhasePresent"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "phases"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, string] & {
        phaseType: bigint;
        price: bigint;
        startTime: bigint;
        endTime: bigint;
        maxSupply: bigint;
        maxPerWallet: bigint;
        mintedInPhase: bigint;
        merkleRoot: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "recordMint"
  ): TypedContractMethod<[user: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PhaseAdded"
  ): TypedContractEvent<
    PhaseAddedEvent.InputTuple,
    PhaseAddedEvent.OutputTuple,
    PhaseAddedEvent.OutputObject
  >;
  getEvent(
    key: "PhaseUpdated"
  ): TypedContractEvent<
    PhaseUpdatedEvent.InputTuple,
    PhaseUpdatedEvent.OutputTuple,
    PhaseUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PhaseAdded(uint256,uint8,uint256)": TypedContractEvent<
      PhaseAddedEvent.InputTuple,
      PhaseAddedEvent.OutputTuple,
      PhaseAddedEvent.OutputObject
    >;
    PhaseAdded: TypedContractEvent<
      PhaseAddedEvent.InputTuple,
      PhaseAddedEvent.OutputTuple,
      PhaseAddedEvent.OutputObject
    >;

    "PhaseUpdated(uint256,uint8,uint256)": TypedContractEvent<
      PhaseUpdatedEvent.InputTuple,
      PhaseUpdatedEvent.OutputTuple,
      PhaseUpdatedEvent.OutputObject
    >;
    PhaseUpdated: TypedContractEvent<
      PhaseUpdatedEvent.InputTuple,
      PhaseUpdatedEvent.OutputTuple,
      PhaseUpdatedEvent.OutputObject
    >;
  };
}
