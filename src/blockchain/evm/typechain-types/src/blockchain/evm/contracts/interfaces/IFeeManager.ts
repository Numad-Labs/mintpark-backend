/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface IFeeManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getPlatformFeeInfo"
      | "getRoyaltyInfo"
      | "processFees"
      | "setPlatformFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PlatformFeeUpdated" | "WithdrawCompleted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getPlatformFeeInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPlatformFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
}

export namespace PlatformFeeUpdatedEvent {
  export type InputTuple = [
    newPercentage: BigNumberish,
    newRecipient: AddressLike
  ];
  export type OutputTuple = [newPercentage: bigint, newRecipient: string];
  export interface OutputObject {
    newPercentage: bigint;
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawCompletedEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFeeManager extends BaseContract {
  connect(runner?: ContractRunner | null): IFeeManager;
  waitForDeployment(): Promise<this>;

  interface: IFeeManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPlatformFeeInfo: TypedContractMethod<
    [],
    [[bigint, string] & { percentage: bigint; recipient: string }],
    "view"
  >;

  getRoyaltyInfo: TypedContractMethod<
    [],
    [[string, bigint] & { receiver: string; percentage: bigint }],
    "view"
  >;

  processFees: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPlatformFee: TypedContractMethod<
    [newPercentage: BigNumberish, newRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPlatformFeeInfo"
  ): TypedContractMethod<
    [],
    [[bigint, string] & { percentage: bigint; recipient: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoyaltyInfo"
  ): TypedContractMethod<
    [],
    [[string, bigint] & { receiver: string; percentage: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "processFees"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformFee"
  ): TypedContractMethod<
    [newPercentage: BigNumberish, newRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "PlatformFeeUpdated"
  ): TypedContractEvent<
    PlatformFeeUpdatedEvent.InputTuple,
    PlatformFeeUpdatedEvent.OutputTuple,
    PlatformFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawCompleted"
  ): TypedContractEvent<
    WithdrawCompletedEvent.InputTuple,
    WithdrawCompletedEvent.OutputTuple,
    WithdrawCompletedEvent.OutputObject
  >;

  filters: {
    "PlatformFeeUpdated(uint96,address)": TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;
    PlatformFeeUpdated: TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;

    "WithdrawCompleted(address,uint256)": TypedContractEvent<
      WithdrawCompletedEvent.InputTuple,
      WithdrawCompletedEvent.OutputTuple,
      WithdrawCompletedEvent.OutputObject
    >;
    WithdrawCompleted: TypedContractEvent<
      WithdrawCompletedEvent.InputTuple,
      WithdrawCompletedEvent.OutputTuple,
      WithdrawCompletedEvent.OutputObject
    >;
  };
}
