/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ISignatureVerifier,
  ISignatureVerifierInterface,
} from "../../../../../../../src/blockchain/evm/contracts/DirectMintNFT/interfaces/ISignatureVerifier";

const _abi = [
  {
    inputs: [],
    name: "getDomainSeparator",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "uniqueId",
        type: "bytes32",
      },
    ],
    name: "isUniqueIdUsed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "uniqueId",
        type: "bytes32",
      },
    ],
    name: "markUniqueIdAsUsed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "minter",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "uri",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "phaseIndex",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "uniqueId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "verifySignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ISignatureVerifier__factory {
  static readonly abi = _abi;
  static createInterface(): ISignatureVerifierInterface {
    return new Interface(_abi) as ISignatureVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ISignatureVerifier {
    return new Contract(address, _abi, runner) as unknown as ISignatureVerifier;
  }
}
