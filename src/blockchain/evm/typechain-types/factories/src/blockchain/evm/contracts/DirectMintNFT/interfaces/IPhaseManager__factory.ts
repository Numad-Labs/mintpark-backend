/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPhaseManager,
  IPhaseManagerInterface,
} from "../../../../../../../src/blockchain/evm/contracts/DirectMintNFT/interfaces/IPhaseManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "phaseIndex",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum IPhaseManager.PhaseType",
        name: "phaseType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "PhaseAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "phaseIndex",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum IPhaseManager.PhaseType",
        name: "phaseType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "PhaseUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "enum IPhaseManager.PhaseType",
        name: "_phaseType",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_endTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxPerWallet",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
    ],
    name: "addPhase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getActivePhase",
    outputs: [
      {
        internalType: "uint256",
        name: "phaseIndex",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "enum IPhaseManager.PhaseType",
            name: "phaseType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPerWallet",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "mintedInPhase",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "merkleRoot",
            type: "bytes32",
          },
        ],
        internalType: "struct IPhaseManager.Phase",
        name: "phase",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "enum IPhaseManager.PhaseType",
        name: "phaseType",
        type: "uint8",
      },
    ],
    name: "getMintedInPhase",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPhaseCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isActivePhasePresent",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "recordMint",
    outputs: [
      {
        internalType: "enum IPhaseManager.PhaseType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IPhaseManager__factory {
  static readonly abi = _abi;
  static createInterface(): IPhaseManagerInterface {
    return new Interface(_abi) as IPhaseManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IPhaseManager {
    return new Contract(address, _abi, runner) as unknown as IPhaseManager;
  }
}
