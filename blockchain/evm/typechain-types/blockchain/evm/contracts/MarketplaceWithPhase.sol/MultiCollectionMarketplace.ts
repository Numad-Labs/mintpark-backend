/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace MultiCollectionMarketplace {
  export type CollectionStruct = {
    nftContract: AddressLike;
    creator: AddressLike;
    currentPhase: BigNumberish;
    whitelistRoot: BytesLike;
    isActive: boolean;
    marketplaceFee: BigNumberish;
  };

  export type CollectionStructOutput = [
    nftContract: string,
    creator: string,
    currentPhase: bigint,
    whitelistRoot: string,
    isActive: boolean,
    marketplaceFee: bigint
  ] & {
    nftContract: string;
    creator: string;
    currentPhase: bigint;
    whitelistRoot: string;
    isActive: boolean;
    marketplaceFee: bigint;
  };

  export type ListingStruct = {
    listingId: BigNumberish;
    nftContract: AddressLike;
    tokenId: BigNumberish;
    seller: AddressLike;
    price: BigNumberish;
    isActive: boolean;
    requiredPhase: BigNumberish;
  };

  export type ListingStructOutput = [
    listingId: bigint,
    nftContract: string,
    tokenId: bigint,
    seller: string,
    price: bigint,
    isActive: boolean,
    requiredPhase: bigint
  ] & {
    listingId: bigint;
    nftContract: string;
    tokenId: bigint;
    seller: string;
    price: bigint;
    isActive: boolean;
    requiredPhase: bigint;
  };

  export type PhaseConfigStruct = {
    startTime: BigNumberish;
    endTime: BigNumberish;
    price: BigNumberish;
    maxPerWallet: BigNumberish;
    isActive: boolean;
  };

  export type PhaseConfigStructOutput = [
    startTime: bigint,
    endTime: bigint,
    price: bigint,
    maxPerWallet: bigint,
    isActive: boolean
  ] & {
    startTime: bigint;
    endTime: bigint;
    price: bigint;
    maxPerWallet: bigint;
    isActive: boolean;
  };
}

export interface MultiCollectionMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelListing"
      | "collections"
      | "configurePhase"
      | "createListing"
      | "getCollection"
      | "getCurrentCollectionId"
      | "getCurrentListingId"
      | "getListing"
      | "getPhaseConfig"
      | "listings"
      | "owner"
      | "phaseConfigs"
      | "purchaseCounts"
      | "purchaseListing"
      | "registerCollection"
      | "renounceOwnership"
      | "setPhase"
      | "transferOwnership"
      | "updateWhitelistRoot"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CollectionRegistered"
      | "ListingCancelled"
      | "ListingCreated"
      | "ListingSold"
      | "OwnershipTransferred"
      | "PhaseChanged"
      | "PhaseConfigured"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collections",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configurePhase",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollection",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCollectionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentListingId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPhaseConfig",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "phaseConfigs",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCounts",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseListing",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCollection",
    values: [AddressLike, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPhase",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelistRoot",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configurePhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCollectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentListingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPhaseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "phaseConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPhase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelistRoot",
    data: BytesLike
  ): Result;
}

export namespace CollectionRegisteredEvent {
  export type InputTuple = [nftContract: AddressLike, creator: AddressLike];
  export type OutputTuple = [nftContract: string, creator: string];
  export interface OutputObject {
    nftContract: string;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingCancelledEvent {
  export type InputTuple = [listingId: BigNumberish];
  export type OutputTuple = [listingId: bigint];
  export interface OutputObject {
    listingId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingCreatedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    nftContract: AddressLike,
    tokenId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    nftContract: string,
    tokenId: bigint,
    price: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    nftContract: string;
    tokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingSoldEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    buyer: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [listingId: bigint, buyer: string, price: bigint];
  export interface OutputObject {
    listingId: bigint;
    buyer: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PhaseChangedEvent {
  export type InputTuple = [nftContract: AddressLike, newPhase: BigNumberish];
  export type OutputTuple = [nftContract: string, newPhase: bigint];
  export interface OutputObject {
    nftContract: string;
    newPhase: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PhaseConfiguredEvent {
  export type InputTuple = [
    nftContract: AddressLike,
    phase: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    nftContract: string,
    phase: bigint,
    startTime: bigint,
    endTime: bigint,
    price: bigint
  ];
  export interface OutputObject {
    nftContract: string;
    phase: bigint;
    startTime: bigint;
    endTime: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultiCollectionMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): MultiCollectionMarketplace;
  waitForDeployment(): Promise<this>;

  interface: MultiCollectionMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelListing: TypedContractMethod<
    [listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  collections: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, string, boolean, bigint] & {
        nftContract: string;
        creator: string;
        currentPhase: bigint;
        whitelistRoot: string;
        isActive: boolean;
        marketplaceFee: bigint;
      }
    ],
    "view"
  >;

  configurePhase: TypedContractMethod<
    [
      nftContract: AddressLike,
      phase: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      price: BigNumberish,
      maxPerWallet: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createListing: TypedContractMethod<
    [
      nftContract: AddressLike,
      tokenId: BigNumberish,
      price: BigNumberish,
      requiredPhase: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getCollection: TypedContractMethod<
    [nftContract: AddressLike],
    [MultiCollectionMarketplace.CollectionStructOutput],
    "view"
  >;

  getCurrentCollectionId: TypedContractMethod<[], [bigint], "view">;

  getCurrentListingId: TypedContractMethod<[], [bigint], "view">;

  getListing: TypedContractMethod<
    [listingId: BigNumberish],
    [MultiCollectionMarketplace.ListingStructOutput],
    "view"
  >;

  getPhaseConfig: TypedContractMethod<
    [nftContract: AddressLike, phase: BigNumberish],
    [MultiCollectionMarketplace.PhaseConfigStructOutput],
    "view"
  >;

  listings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, bigint, boolean, bigint] & {
        listingId: bigint;
        nftContract: string;
        tokenId: bigint;
        seller: string;
        price: bigint;
        isActive: boolean;
        requiredPhase: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  phaseConfigs: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        startTime: bigint;
        endTime: bigint;
        price: bigint;
        maxPerWallet: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  purchaseCounts: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [bigint],
    "view"
  >;

  purchaseListing: TypedContractMethod<
    [listingId: BigNumberish, whitelistProof: BytesLike[]],
    [void],
    "payable"
  >;

  registerCollection: TypedContractMethod<
    [
      nftContract: AddressLike,
      creator: AddressLike,
      whitelistRoot: BytesLike,
      marketplaceFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPhase: TypedContractMethod<
    [nftContract: AddressLike, newPhase: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateWhitelistRoot: TypedContractMethod<
    [nftContract: AddressLike, newRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelListing"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collections"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, string, boolean, bigint] & {
        nftContract: string;
        creator: string;
        currentPhase: bigint;
        whitelistRoot: string;
        isActive: boolean;
        marketplaceFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "configurePhase"
  ): TypedContractMethod<
    [
      nftContract: AddressLike,
      phase: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      price: BigNumberish,
      maxPerWallet: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createListing"
  ): TypedContractMethod<
    [
      nftContract: AddressLike,
      tokenId: BigNumberish,
      price: BigNumberish,
      requiredPhase: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCollection"
  ): TypedContractMethod<
    [nftContract: AddressLike],
    [MultiCollectionMarketplace.CollectionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentCollectionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentListingId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [listingId: BigNumberish],
    [MultiCollectionMarketplace.ListingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPhaseConfig"
  ): TypedContractMethod<
    [nftContract: AddressLike, phase: BigNumberish],
    [MultiCollectionMarketplace.PhaseConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, bigint, boolean, bigint] & {
        listingId: bigint;
        nftContract: string;
        tokenId: bigint;
        seller: string;
        price: bigint;
        isActive: boolean;
        requiredPhase: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "phaseConfigs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        startTime: bigint;
        endTime: bigint;
        price: bigint;
        maxPerWallet: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchaseCounts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchaseListing"
  ): TypedContractMethod<
    [listingId: BigNumberish, whitelistProof: BytesLike[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registerCollection"
  ): TypedContractMethod<
    [
      nftContract: AddressLike,
      creator: AddressLike,
      whitelistRoot: BytesLike,
      marketplaceFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPhase"
  ): TypedContractMethod<
    [nftContract: AddressLike, newPhase: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateWhitelistRoot"
  ): TypedContractMethod<
    [nftContract: AddressLike, newRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CollectionRegistered"
  ): TypedContractEvent<
    CollectionRegisteredEvent.InputTuple,
    CollectionRegisteredEvent.OutputTuple,
    CollectionRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ListingCancelled"
  ): TypedContractEvent<
    ListingCancelledEvent.InputTuple,
    ListingCancelledEvent.OutputTuple,
    ListingCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ListingCreated"
  ): TypedContractEvent<
    ListingCreatedEvent.InputTuple,
    ListingCreatedEvent.OutputTuple,
    ListingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ListingSold"
  ): TypedContractEvent<
    ListingSoldEvent.InputTuple,
    ListingSoldEvent.OutputTuple,
    ListingSoldEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PhaseChanged"
  ): TypedContractEvent<
    PhaseChangedEvent.InputTuple,
    PhaseChangedEvent.OutputTuple,
    PhaseChangedEvent.OutputObject
  >;
  getEvent(
    key: "PhaseConfigured"
  ): TypedContractEvent<
    PhaseConfiguredEvent.InputTuple,
    PhaseConfiguredEvent.OutputTuple,
    PhaseConfiguredEvent.OutputObject
  >;

  filters: {
    "CollectionRegistered(address,address)": TypedContractEvent<
      CollectionRegisteredEvent.InputTuple,
      CollectionRegisteredEvent.OutputTuple,
      CollectionRegisteredEvent.OutputObject
    >;
    CollectionRegistered: TypedContractEvent<
      CollectionRegisteredEvent.InputTuple,
      CollectionRegisteredEvent.OutputTuple,
      CollectionRegisteredEvent.OutputObject
    >;

    "ListingCancelled(uint256)": TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;
    ListingCancelled: TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;

    "ListingCreated(uint256,address,uint256,uint256)": TypedContractEvent<
      ListingCreatedEvent.InputTuple,
      ListingCreatedEvent.OutputTuple,
      ListingCreatedEvent.OutputObject
    >;
    ListingCreated: TypedContractEvent<
      ListingCreatedEvent.InputTuple,
      ListingCreatedEvent.OutputTuple,
      ListingCreatedEvent.OutputObject
    >;

    "ListingSold(uint256,address,uint256)": TypedContractEvent<
      ListingSoldEvent.InputTuple,
      ListingSoldEvent.OutputTuple,
      ListingSoldEvent.OutputObject
    >;
    ListingSold: TypedContractEvent<
      ListingSoldEvent.InputTuple,
      ListingSoldEvent.OutputTuple,
      ListingSoldEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PhaseChanged(address,uint8)": TypedContractEvent<
      PhaseChangedEvent.InputTuple,
      PhaseChangedEvent.OutputTuple,
      PhaseChangedEvent.OutputObject
    >;
    PhaseChanged: TypedContractEvent<
      PhaseChangedEvent.InputTuple,
      PhaseChangedEvent.OutputTuple,
      PhaseChangedEvent.OutputObject
    >;

    "PhaseConfigured(address,uint8,uint256,uint256,uint256)": TypedContractEvent<
      PhaseConfiguredEvent.InputTuple,
      PhaseConfiguredEvent.OutputTuple,
      PhaseConfiguredEvent.OutputObject
    >;
    PhaseConfigured: TypedContractEvent<
      PhaseConfiguredEvent.InputTuple,
      PhaseConfiguredEvent.OutputTuple,
      PhaseConfiguredEvent.OutputObject
    >;
  };
}
