generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/types/db"
  enumFileName = "enums.ts"
  fileName     = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  role      ROLES    @default(USER)
  createdAt DateTime @default(now())

  purchases  Purchase[]
  orders     Order[]
  LaunchItem LaunchItem[]
  Launch     Launch[]
  UserLayer  UserLayer[]
  Collection Collection[]
}

model UserLayer {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  address       String
  pubkey        String?
  xpub          String?
  createdAt     DateTime  @default(now())
  isActive      Boolean   @default(true)
  deactivatedAt DateTime?

  userId     String
  user       User         @relation(fields: [userId], references: [id])
  layerId    String
  layer      Layer        @relation(fields: [layerId], references: [id])
  Order      Order[]
  Launch     Launch[]
  Collection Collection[]

  @@unique([address, isActive, layerId, deactivatedAt])
}

model Currency {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  ticker    String    @unique
  price     Float     @default(0)
  updatedAt DateTime? @default(now())
  Layer     Layer[]

  @@index([ticker])
}

model Layer {
  id         String       @id @default(dbgenerated("gen_random_uuid()"))
  name       String
  layer      LAYER        @default(FRACTAL)
  network    NETWORK      @default(TESTNET)
  currencyId String
  currency   Currency     @relation(fields: [currencyId], references: [id])
  Collection Collection[]
  UserLayer  UserLayer[]
}

model Order {
  id             String  @id @default(dbgenerated("gen_random_uuid()"))
  feeRate        Float   @default(1)
  fundingAddress String?
  fundingAmount  Float
  fundingTxId    String?
  privateKey     String?

  createdAt DateTime  @default(now())
  paidAt    DateTime?
  mintedAt  DateTime?
  expiredAt DateTime?

  orderType   ORDER_TYPE   @default(MINT_COLLECTIBLE)
  orderStatus ORDER_STATUS @default(PENDING)

  userId       String
  user         User        @relation(fields: [userId], references: [id])
  userLayerId  String
  userLayer    UserLayer   @relation(fields: [userLayerId], references: [id])
  collectionId String?
  collection   Collection? @relation(fields: [collectionId], references: [id])
  launchItemId String?
  launchItem   LaunchItem? @relation(fields: [launchItemId], references: [id], onDelete: Cascade)
  Purchase     Purchase?   @relation(fields: [purchaseId], references: [id])
  purchaseId   String?

  orderItems OrderItem[]
}

model OrderItem {
  id         String            @id @default(dbgenerated("gen_random_uuid()"))
  mintedTxId String?
  createdAt  DateTime          @default(now())
  type       ORDER_ITEM_TYPE
  status     ORDER_ITEM_STATUS @default(PENDING)

  orderId       String
  order         Order        @relation(fields: [orderId], references: [id])
  collectibleId String?
  collectible   Collectible? @relation(fields: [collectibleId], references: [id])
  traitValueId  String?
  traitValue    TraitValue?  @relation(fields: [traitValueId], references: [id])
}

model Collection {
  id              String  @id @default(dbgenerated("gen_random_uuid()"))
  name            String
  creatorName     String?
  description     String
  discordUrl      String?
  twitterUrl      String?
  websiteUrl      String?
  iconUrl         String?
  inscriptionIcon String?
  slug            String?
  logoKey         String?
  supply          Int
  ownerCount      Int?

  contractAddress String?
  type            COLLECTION_TYPE   @default(RECURSIVE_INSCRIPTION)
  status          COLLECTION_STATUS @default(UNCONFIRMED)
  createdAt       DateTime          @default(now())

  layerId            String
  layer              Layer       @relation(fields: [layerId], references: [id])
  creatorId          String?
  creator            User?       @relation(fields: [creatorId], references: [id])
  creatorUserLayerId String?
  creatorUserLayer   UserLayer?  @relation(fields: [creatorUserLayerId], references: [id])
  parentCollectionId String?
  parentCollection   Collection? @relation("ParentChild", fields: [parentCollectionId], references: [id])

  launches         Launch[]
  orders           Order[]
  collectibles     Collectible[]
  childCollections Collection[]  @relation("ParentChild")
  TraitType        TraitType[]
}

model Collectible {
  id                     String             @id @default(dbgenerated("gen_random_uuid()"))
  name                   String
  fileKey                String?
  highResolutionImageUrl String?
  cid                    String?
  uniqueIdx              String?
  nftId                  String
  metadata               Json?
  status                 COLLECTIBLE_STATUS @default(UNCONFIRMED)
  createdAt              DateTime           @default(now())
  mintingTxId            String?

  lockingAddress    String?
  lockingPrivateKey String?

  parentCollectibleId String?
  parentCollectible   Collectible? @relation("ParentChild", fields: [parentCollectibleId], references: [id])
  collectionId        String
  collection          Collection   @relation(fields: [collectionId], references: [id])

  childCollectibles Collectible[]      @relation("ParentChild")
  OrderItem         OrderItem[]
  List              List[]
  CollectibleTrait  CollectibleTrait[]
  LaunchItem        LaunchItem[]
}

model TraitType {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  zIndex    Int
  createdAt DateTime @default(now())

  collectionId String
  collection   Collection   @relation(fields: [collectionId], references: [id])
  TraitValue   TraitValue[]
}

model TraitValue {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  value         String
  inscriptionId String?
  fileKey       String
  createdAt     DateTime @default(now())
  mintedAt      DateTime @default(now())

  lockingAddress    String?
  lockingPrivateKey String?

  traitTypeId      String
  traitType        TraitType          @relation(fields: [traitTypeId], references: [id])
  CollectibleTrait CollectibleTrait[]
  OrderItem        OrderItem[]
}

model CollectibleTrait {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())

  collectibleId String
  collectible   Collectible @relation(fields: [collectibleId], references: [id])
  traitValueId  String
  traitValue    TraitValue  @relation(fields: [traitValueId], references: [id])
}

model Launch {
  id                 String        @id @default(dbgenerated("gen_random_uuid()"))
  collectionId       String
  collection         Collection    @relation(fields: [collectionId], references: [id])
  isWhitelisted      Boolean
  wlStartsAt         BigInt?
  wlEndsAt           BigInt?
  wlMintPrice        Float?
  wlMaxMintPerWallet Int?
  poStartsAt         BigInt
  poEndsAt           BigInt?
  poMintPrice        Float
  poMaxMintPerWallet Int
  createdAt          DateTime      @default(now())
  status             LAUNCH_STATUS @default(UNCONFIRMED)
  reservedCount      Int           @default(0)

  userLayerId String
  userLayer   UserLayer @relation(fields: [userLayerId], references: [id])

  launchItems LaunchItem[]
  wlAddresses WlAddress[]
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?
}

model LaunchItem {
  id     String             @id @default(dbgenerated("gen_random_uuid()"))
  status LAUNCH_ITEM_STATUS @default(ACTIVE)

  onHoldUntil DateTime?
  mintingTxId String?

  launchId      String
  launch        Launch      @relation(fields: [launchId], references: [id])
  collectibleId String
  collectible   Collectible @relation(fields: [collectibleId], references: [id])
  onHoldBy      String?
  User          User?       @relation(fields: [onHoldBy], references: [id])

  Order     Order[]
  purchases Purchase[]
}

model Purchase {
  id           String     @id @default(dbgenerated("gen_random_uuid()"))
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  launchItemId String
  launchItem   LaunchItem @relation(fields: [launchItemId], references: [id])
  purchasedAt  DateTime   @default(now())
  Order        Order[]
}

model WlAddress {
  id       String @id @default(dbgenerated("gen_random_uuid()"))
  launchId String
  launch   Launch @relation(fields: [launchId], references: [id])
  address  String
}

model List {
  id              String      @id @default(dbgenerated("gen_random_uuid()"))
  collectibleId   String
  collectible     Collectible @relation(fields: [collectibleId], references: [id])
  sellerId        String
  buyerId         String?
  address         String
  privateKey      String
  vaultTxid       String?
  vaultVout       Int?
  inscribedAmount Int?        @default(546)
  price           Float
  listedAt        DateTime    @default(now())
  soldTxid        String?
  soldAt          DateTime?
  status          LIST_STATUS @default(PENDING)
}

enum ORDER_TYPE {
  MINT_COLLECTIBLE
  MINT_RECURSIVE_COLLECTIBLE
  LAUNCH_BUY
}

enum ORDER_STATUS {
  PENDING
  IN_QUEUE
  DONE
  EXPIRED
}

enum ORDER_ITEM_TYPE {
  COLLECTIBLE
  TRAIT
}

enum ORDER_ITEM_STATUS {
  PENDING
  IN_QUEUE
  MINTING
  MINTED
  FAILED
}

enum COLLECTION_STATUS {
  UNCONFIRMED
  CONFIRMED
}

enum COLLECTION_TYPE {
  INSCRIPTION
  RECURSIVE_INSCRIPTION
  IPFS
  SYNTHETIC
}

enum COLLECTIBLE_STATUS {
  UNCONFIRMED
  CONFIRMED
  BURNED
  LOCKED
}

enum LAUNCH_STATUS {
  UNCONFIRMED
  CONFIRMED
}

enum LAUNCH_ITEM_STATUS {
  ACTIVE
  SOLD
  RESERVED
  CANCELLED
}

enum LIST_STATUS {
  PENDING
  ACTIVE
  SOLD
  CANCELLED
}

enum LAYER {
  BITCOIN
  FRACTAL
  CITREA
}

enum NETWORK {
  MAINNET
  TESTNET
}

enum ROLES {
  USER
  ADMIN
  SUPER_ADMIN
}
