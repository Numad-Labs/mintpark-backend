generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/types/db"
  enumFileName = "enums.ts"
  fileName     = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(dbgenerated("gen_random_uuid()"))
  layerId   String?
  layer     Layer?     @relation(fields: [layerId], references: [id])
  address   String     @unique
  pubkey    String?    @unique
  xpub      String?    @unique
  createdAt DateTime   @default(now())
  purchases Purchase[]
  orders    Order[]
}

model Layer {
  id         String       @id @default(dbgenerated("gen_random_uuid()"))
  name       String
  layer      LAYER        @default(FRACTAL)
  network    NETWORK      @default(TESTNET)
  users      User[]
  Collection Collection[]
}

model Order {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  collectionId   String?
  collection     Collection?  @relation(fields: [collectionId], references: [id])
  quantity       Int
  feeRate        Float        @default(1)
  fundingAddress String
  networkFee     Float
  serviceFee     Float
  fundingAmount  Float
  txId           String?
  privateKey     String
  createdAt      DateTime     @default(now())
  paidAt         DateTime?
  mintedAt       DateTime?
  expiredAt      DateTime?
  orderType      ORDER_TYPE   @default(COLLECTIBLE)
  orderStatus    ORDER_STATUS @default(PENDING)
  orderItems     OrderItem[]
  purchase       Purchase?
}

model OrderItem {
  id       String            @id @default(dbgenerated("gen_random_uuid()"))
  orderId  String
  order    Order             @relation(fields: [orderId], references: [id])
  fileKey  String
  metadata Json?
  status   ORDER_ITEM_STATUS @default(PENDING)

  evmAssetId String?
  name String?
}

model Collection {
  id              String          @id @default(dbgenerated("gen_random_uuid()"))
  name            String
  creator         String?
  description     String
  logoKey         String?
  supply          Int
  type            COLLECTION_TYPE @default(UNCONFIRMED)
  discordUrl      String?
  twitterUrl      String?
  websiteUrl      String?
  iconUrl         String?
  inscriptionIcon String?
  slug            String?
  layerId         String?

  contractAddress String?
  createdAt       DateTime        @default(now())
  layer           Layer?          @relation(fields: [layerId], references: [id], onDelete: SetNull)
  launches        Launch[]
  orders          Order[]
  collectibles    Collectible[]
}

model Purchase {
  id           String     @id @default(dbgenerated("gen_random_uuid()"))
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  launchItemId String
  launchItem   LaunchItem @relation(fields: [launchItemId], references: [id])
  purchasedAt  DateTime   @default(now())
  order        Order      @relation(fields: [orderId], references: [id])
  orderId      String     @unique
}

model LaunchItem {
  id        String             @id @default(dbgenerated("gen_random_uuid()"))
  launchId  String
  launch    Launch             @relation(fields: [launchId], references: [id])
  fileKey   String
  metadata  Json?
  status    LAUNCH_ITEM_STATUS @default(ACTIVE)
  purchases Purchase[]

  evmAssetId String?
  name String?
  onHoldUntil DateTime?
}

model Launch {
  id                 String       @id @default(dbgenerated("gen_random_uuid()"))
  collectionId       String
  collection         Collection   @relation(fields: [collectionId], references: [id])
  isWhitelisted      Boolean
  wlStartsAt         BigInt?
  wlEndsAt           BigInt?
  wlMintPrice        Float?
  wlMaxMintPerWallet Int?
  poStartsAt         BigInt @default(0)
  poEndsAt           BigInt @default(0)
  poMintPrice        Float
  poMaxMintPerWallet Int
  createdAt          DateTime     @default(now())
  launchItems        LaunchItem[]
  wlAddresses        WlAddress[]
}

model WlAddress {
  id       String @id @default(dbgenerated("gen_random_uuid()"))
  launchId String
  launch   Launch @relation(fields: [launchId], references: [id])
  address  String
}

model Trait {
  id                String             @id @default(dbgenerated("gen_random_uuid()"))
  name              String
  collectibleTraits CollectibleTrait[]
}

model CollectibleTrait {
  id            String      @id @default(dbgenerated("gen_random_uuid()"))
  collectibleId String
  collectible   Collectible @relation(fields: [collectibleId], references: [id])
  traitId       String
  trait         Trait       @relation(fields: [traitId], references: [id])
  value         String
  rarity        Float
}

model Collectible {
  id           String             @id @default(dbgenerated("gen_random_uuid()"))
  name         String?
  collectionId String
  collection   Collection         @relation(fields: [collectionId], references: [id])
  uniqueIdx    String
  fileKey      String?
  createdAt    DateTime           @default(now())
  traits       CollectibleTrait[]
  list         List[]
}

model List {
  id              String      @id @default(dbgenerated("gen_random_uuid()"))
  collectibleId   String
  collectible     Collectible @relation(fields: [collectibleId], references: [id])
  sellerId        String
  buyerId         String?
  address         String
  privateKey      String
  vaultTxid       String?
  vaultVout       Int?
  inscribedAmount Int?        @default(546)
  price           Float
  listedAt        DateTime    @default(now())
  soldTxid        String?
  soldAt          DateTime?
  status          LIST_STATUS @default(PENDING)
}

enum ORDER_TYPE {
  TOKEN
  COLLECTIBLE
  COLLECTION
  LAUNCH
}

enum ORDER_STATUS {
  PENDING
  IN_QUEUE
  DONE
  EXPIRED
}

enum ORDER_ITEM_STATUS {
  PENDING
  IN_QUEUE
  MINTING
  MINTED
  FAILED
}

enum COLLECTION_TYPE {
  UNCONFIRMED
  LAUNCHED
  MINTED
}

enum LIST_STATUS {
  PENDING
  ACTIVE
  SOLD
  CANCELLED
}

enum LAUNCH_ITEM_STATUS {
  ACTIVE
  SOLD
  CANCELLED
}

enum LAYER {
  BITCOIN
  FRACTAL
  CITREA
}

enum NETWORK {
  MAINNET
  TESTNET
}
