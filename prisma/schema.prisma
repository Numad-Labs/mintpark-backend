generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/types/db"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(dbgenerated("gen_random_uuid()"))
  role       ROLES        @default(USER)
  createdAt  DateTime     @default(now())
  Collection Collection[]
  FailedMint FailedMint[]
  Launch     Launch[]
  LaunchItem LaunchItem[]
  orders     Order[]
  purchases  Purchase[]
  UserLayer  UserLayer[]
}

model UserLayer {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  address       String
  pubkey        String?
  xpub          String?
  createdAt     DateTime     @default(now())
  isActive      Boolean      @default(true)
  deactivatedAt DateTime?
  userId        String
  layerId       String
  Collection    Collection[]
  Launch        Launch[]
  Order         Order[]
  layer         Layer        @relation(fields: [layerId], references: [id])
  user          User         @relation(fields: [userId], references: [id])

  @@unique([address, isActive, layerId, deactivatedAt])
  @@index([address, isActive])
}

model Currency {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  ticker    String    @unique
  price     Float     @default(0)
  updatedAt DateTime? @default(now())
  Layer     Layer[]

  @@index([ticker])
}

model Layer {
  id         String       @id @default(dbgenerated("gen_random_uuid()"))
  name       String
  layer      LAYER        @default(CITREA)
  network    NETWORK      @default(TESTNET)
  currencyId String
  chainId    String?
  layerType  LAYER_TYPE?
  Collection Collection[]
  currency   Currency     @relation(fields: [currencyId], references: [id])
  UserLayer  UserLayer[]
}

model Order {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  feeRate        Float        @default(1)
  fundingAddress String?
  fundingAmount  Float
  fundingTxId    String?
  privateKey     String?
  createdAt      DateTime     @default(now())
  mintedAt       DateTime?
  orderType      ORDER_TYPE   @default(MINT_COLLECTIBLE)
  orderStatus    ORDER_STATUS @default(PENDING)
  userId         String
  userLayerId    String
  collectionId   String?
  launchItemId   String?
  purchaseId     String?
  collection     Collection?  @relation(fields: [collectionId], references: [id])
  launchItem     LaunchItem?  @relation(fields: [launchItemId], references: [id], onDelete: Cascade)
  Purchase       Purchase?    @relation(fields: [purchaseId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  userLayer      UserLayer    @relation(fields: [userLayerId], references: [id])
  orderItems     OrderItem[]
}

model OrderItem {
  id            String            @id @default(dbgenerated("gen_random_uuid()"))
  mintedTxId    String?
  createdAt     DateTime          @default(now())
  type          ORDER_ITEM_TYPE
  status        ORDER_ITEM_STATUS @default(PENDING)
  orderId       String
  collectibleId String?
  traitValueId  String?
  collectible   Collectible?      @relation(fields: [collectibleId], references: [id])
  order         Order             @relation(fields: [orderId], references: [id])
  traitValue    TraitValue?       @relation(fields: [traitValueId], references: [id])
}

model Collection {
  id                 String            @id @default(dbgenerated("gen_random_uuid()"))
  name               String
  creatorName        String?
  description        String
  discordUrl         String?
  twitterUrl         String?
  websiteUrl         String?
  iconUrl            String?
  inscriptionIcon    String?
  slug               String?
  logoKey            String?
  supply             Int
  ownerCount         Int?
  contractAddress    String?
  type               COLLECTION_TYPE   @default(RECURSIVE_INSCRIPTION)
  status             COLLECTION_STATUS @default(UNCONFIRMED)
  createdAt          DateTime          @default(now())
  layerId            String
  creatorId          String?
  creatorUserLayerId String?
  parentCollectionId String?
  badgeCid           String?
  badgeSupply        Int?
  isBadge            Boolean           @default(false)
  updatedAt          DateTime?
  badgeCurrentNftId  Int?
  contractVersion    String?
  collectibles       Collectible[]
  creator            User?             @relation(fields: [creatorId], references: [id])
  creatorUserLayer   UserLayer?        @relation(fields: [creatorUserLayerId], references: [id])
  layer              Layer             @relation(fields: [layerId], references: [id])
  parentCollection   Collection?       @relation("ParentChild", fields: [parentCollectionId], references: [id])
  childCollections   Collection[]      @relation("ParentChild")
  launches           Launch[]
  orders             Order[]
  TraitType          TraitType[]

  @@index([status])
  @@index([layerId, status])
}

model Collectible {
  id                     String             @id @default(dbgenerated("gen_random_uuid()"))
  name                   String
  fileKey                String?
  highResolutionImageUrl String?
  cid                    String?
  uniqueIdx              String?
  nftId                  String
  metadata               Json?
  status                 COLLECTIBLE_STATUS @default(UNCONFIRMED)
  createdAt              DateTime           @default(now())
  mintingTxId            String?
  lockingAddress         String?
  lockingPrivateKey      String?
  parentCollectibleId    String?
  collectionId           String
  fileName               String?
  collection             Collection         @relation(fields: [collectionId], references: [id])
  parentCollectible      Collectible?       @relation("ParentChild", fields: [parentCollectibleId], references: [id])
  childCollectibles      Collectible[]      @relation("ParentChild")
  CollectibleTrait       CollectibleTrait[]
  LaunchItem             LaunchItem[]
  List                   List[]
  OrderItem              OrderItem[]

  @@index([uniqueIdx])
  @@index([status, uniqueIdx])
  @@index([collectionId, uniqueIdx])
  @@index([createdAt])
  @@index([nftId])
  @@index([collectionId, status])
}

model TraitType {
  id           String       @id @default(dbgenerated("gen_random_uuid()"))
  name         String
  zIndex       Int
  createdAt    DateTime     @default(now())
  collectionId String
  collection   Collection   @relation(fields: [collectionId], references: [id])
  TraitValue   TraitValue[]
}

model TraitValue {
  id                String             @id @default(dbgenerated("gen_random_uuid()"))
  value             String
  inscriptionId     String?
  fileKey           String
  createdAt         DateTime           @default(now())
  mintedAt          DateTime?
  lockingAddress    String?
  lockingPrivateKey String?
  traitTypeId       String
  CollectibleTrait  CollectibleTrait[]
  OrderItem         OrderItem[]
  traitType         TraitType          @relation(fields: [traitTypeId], references: [id])
}

model CollectibleTrait {
  id            String      @id @default(dbgenerated("gen_random_uuid()"))
  createdAt     DateTime    @default(now())
  collectibleId String
  traitValueId  String
  collectible   Collectible @relation(fields: [collectibleId], references: [id])
  traitValue    TraitValue  @relation(fields: [traitValueId], references: [id])

  @@index([collectibleId, traitValueId])
}

model Launch {
  id                   String        @id @default(dbgenerated("gen_random_uuid()"))
  collectionId         String
  isWhitelisted        Boolean       @default(false)
  wlStartsAt           BigInt?
  wlEndsAt             BigInt?
  wlMintPrice          Float?
  wlMaxMintPerWallet   Int?
  poStartsAt           BigInt
  poEndsAt             BigInt?
  poMintPrice          Float
  poMaxMintPerWallet   Int
  createdAt            DateTime      @default(now())
  status               LAUNCH_STATUS @default(UNCONFIRMED)
  userLayerId          String
  userId               String?
  reservedCount        Int           @default(0)
  updatedAt            DateTime?
  fcfsEndsAt           BigInt?
  fcfsMaxMintPerWallet Int?
  fcfsMintPrice        Float?
  fcfsStartsAt         BigInt?
  hasFCFS              Boolean       @default(false)
  collection           Collection    @relation(fields: [collectionId], references: [id])
  User                 User?         @relation(fields: [userId], references: [id])
  userLayer            UserLayer     @relation(fields: [userLayerId], references: [id])
  launchItems          LaunchItem[]
  wlAddresses          WlAddress[]
}

model LaunchItem {
  id            String             @id @default(dbgenerated("gen_random_uuid()"))
  status        LAUNCH_ITEM_STATUS @default(ACTIVE)
  onHoldUntil   DateTime?
  mintingTxId   String?
  launchId      String
  collectibleId String
  onHoldBy      String?
  FailedMint    FailedMint[]
  collectible   Collectible        @relation(fields: [collectibleId], references: [id])
  launch        Launch             @relation(fields: [launchId], references: [id])
  User          User?              @relation(fields: [onHoldBy], references: [id])
  Order         Order[]
  purchases     Purchase[]

  @@index([launchId])
  @@index([status])
  @@index([onHoldBy])
  @@index([onHoldUntil])
  @@index([launchId, status])
  @@index([launchId, status, onHoldUntil])
  @@index([status, onHoldBy])
}

model Purchase {
  id               String     @id @default(dbgenerated("gen_random_uuid()"))
  userId           String
  launchItemId     String
  purchasedAt      DateTime   @default(now())
  purchasedAddress String?
  Order            Order[]
  launchItem       LaunchItem @relation(fields: [launchItemId], references: [id])
  user             User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([purchasedAddress])
  @@index([purchasedAt])
  @@index([launchItemId])
  @@index([purchasedAddress, purchasedAt])
}

model WlAddress {
  id        String       @id @default(dbgenerated("gen_random_uuid()"))
  launchId  String
  address   String
  createdAt DateTime     @default(now())
  phase     LAUNCH_PHASE @default(WHITELIST)
  launch    Launch       @relation(fields: [launchId], references: [id])
}

model List {
  id              String      @id @default(dbgenerated("gen_random_uuid()"))
  collectibleId   String
  sellerId        String
  buyerId         String?
  address         String
  privateKey      String
  vaultTxid       String?
  vaultVout       Int?
  inscribedAmount Int?        @default(546)
  price           Float
  listedAt        DateTime    @default(now())
  soldTxid        String?
  soldAt          DateTime?
  status          LIST_STATUS @default(PENDING)
  collectible     Collectible @relation(fields: [collectibleId], references: [id])

  @@index([status])
  @@index([collectibleId, status])
  @@index([status, sellerId])
  @@index([listedAt])
  @@index([price])
  @@index([collectibleId, status, listedAt])
  @@index([price, status])
  @@index([collectibleId, status, price])
}

model FailedMint {
  id           String     @id @default(dbgenerated("gen_random_uuid()"))
  createdAt    DateTime   @default(now())
  userId       String
  launchItemId String
  launchItem   LaunchItem @relation(fields: [launchItemId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Airdrop {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  address   String

  @@index([address])
}

enum ORDER_TYPE {
  MINT_COLLECTIBLE
  MINT_RECURSIVE_COLLECTIBLE
  LAUNCH_BUY
}

enum ORDER_STATUS {
  PENDING
  IN_QUEUE
  DONE
  EXPIRED
}

enum ORDER_ITEM_TYPE {
  COLLECTIBLE
  TRAIT
}

enum ORDER_ITEM_STATUS {
  PENDING
  IN_QUEUE
  MINTING
  MINTED
  FAILED
}

enum COLLECTION_STATUS {
  UNCONFIRMED
  CONFIRMED
}

enum COLLECTION_TYPE {
  INSCRIPTION
  RECURSIVE_INSCRIPTION
  IPFS_FILE
  IPFS_CID
  SYNTHETIC
}

enum COLLECTIBLE_STATUS {
  UNCONFIRMED
  CONFIRMED
  BURNED
  LOCKED
}

enum LAUNCH_STATUS {
  UNCONFIRMED
  CONFIRMED
}

enum LAUNCH_ITEM_STATUS {
  ACTIVE
  SOLD
  CANCELLED
  RESERVED
}

enum LIST_STATUS {
  PENDING
  ACTIVE
  SOLD
  CANCELLED
}

enum LAYER {
  BITCOIN
  FRACTAL
  CITREA
  HEMI
  SEPOLIA
  POLYGON_ZK
}

enum LAYER_TYPE {
  EVM
  UTXO
}

enum NETWORK {
  MAINNET
  TESTNET
}

enum ROLES {
  USER
  ADMIN
  SUPER_ADMIN
}

enum LAUNCH_PHASE {
  WHITELIST
  FCFS_WHITELIST
}
